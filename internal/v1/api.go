// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for ClientId.
const (
	Api ClientId = "api"
	Ui  ClientId = "ui"
)

// Defines values for CloneStatusResponseStatus.
const (
	CloneStatusResponseStatusFailure CloneStatusResponseStatus = "failure"
	CloneStatusResponseStatusPending CloneStatusResponseStatus = "pending"
	CloneStatusResponseStatusRunning CloneStatusResponseStatus = "running"
	CloneStatusResponseStatusSuccess CloneStatusResponseStatus = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	AutoLvm CustomizationsPartitioningMode = "auto-lvm"
	Lvm     CustomizationsPartitioningMode = "lvm"
	Raw     CustomizationsPartitioningMode = "raw"
)

// Defines values for DistributionProfileItem.
const (
	XccdfOrgSsgprojectContentProfileAnssiBp28Enhanced     DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_enhanced"
	XccdfOrgSsgprojectContentProfileAnssiBp28High         DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_high"
	XccdfOrgSsgprojectContentProfileAnssiBp28Intermediary DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_intermediary"
	XccdfOrgSsgprojectContentProfileAnssiBp28Minimal      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_minimal"
	XccdfOrgSsgprojectContentProfileCis                   DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis"
	XccdfOrgSsgprojectContentProfileCisServerL1           DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_server_l1"
	XccdfOrgSsgprojectContentProfileCisWorkstationL1      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_workstation_l1"
	XccdfOrgSsgprojectContentProfileCisWorkstationL2      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_workstation_l2"
	XccdfOrgSsgprojectContentProfileCui                   DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cui"
	XccdfOrgSsgprojectContentProfileE8                    DistributionProfileItem = "xccdf_org.ssgproject.content_profile_e8"
	XccdfOrgSsgprojectContentProfileHipaa                 DistributionProfileItem = "xccdf_org.ssgproject.content_profile_hipaa"
	XccdfOrgSsgprojectContentProfileIsmO                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_ism_o"
	XccdfOrgSsgprojectContentProfileOspp                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_ospp"
	XccdfOrgSsgprojectContentProfilePciDss                DistributionProfileItem = "xccdf_org.ssgproject.content_profile_pci-dss"
	XccdfOrgSsgprojectContentProfileStandard              DistributionProfileItem = "xccdf_org.ssgproject.content_profile_standard"
	XccdfOrgSsgprojectContentProfileStig                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_stig"
	XccdfOrgSsgprojectContentProfileStigGui               DistributionProfileItem = "xccdf_org.ssgproject.content_profile_stig_gui"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Fedora40     Distributions = "fedora-40"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel89       Distributions = "rhel-89"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel93       Distributions = "rhel-93"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	ImageRequestArchitectureAarch64 ImageRequestArchitecture = "aarch64"
	ImageRequestArchitectureX8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesOci               ImageTypes = "oci"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	Failure UploadStatusStatus = "failure"
	Pending UploadStatusStatus = "pending"
	Running UploadStatusStatus = "running"
	Success UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws              UploadTypes = "aws"
	UploadTypesAwsS3            UploadTypes = "aws.s3"
	UploadTypesAzure            UploadTypes = "azure"
	UploadTypesGcp              UploadTypes = "gcp"
	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"
)

// Defines values for GetPackagesParamsArchitecture.
const (
	GetPackagesParamsArchitectureAarch64 GetPackagesParamsArchitecture = "aarch64"
	GetPackagesParamsArchitectureX8664   GetPackagesParamsArchitecture = "x86_64"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// Region A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// ShareWithAccounts An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Repositories Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// ImageName Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// ResourceGroup Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// SourceId ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// SubscriptionId ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// TenantId ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ClientId defines model for ClientId.
type ClientId string

// CloneRequest defines model for CloneRequest.
type CloneRequest struct {
	union json.RawMessage
}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// CloneStatusResponse defines model for CloneStatusResponse.
type CloneStatusResponse struct {
	ComposeId *openapi_types.UUID         `json:"compose_id,omitempty"`
	Options   CloneStatusResponse_Options `json:"options"`
	Status    CloneStatusResponseStatus   `json:"status"`
	Type      UploadTypes                 `json:"type"`
}

// CloneStatusResponse_Options defines model for CloneStatusResponse.Options.
type CloneStatusResponse_Options struct {
	union json.RawMessage
}

// CloneStatusResponseStatus defines model for CloneStatusResponse.Status.
type CloneStatusResponseStatus string

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta Meta `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	// ComposeId UUID of the parent compose of the clone
	ComposeId openapi_types.UUID `json:"compose_id"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   CloneRequest       `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// OstreeCommit ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Packages Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	ClientId       *ClientId       `json:"client_id,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`

	// Distribution List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution     Distributions `json:"distribution"`
	ImageDescription *string       `json:"image_description,omitempty"`
	ImageName        *string       `json:"image_name,omitempty"`

	// ImageRequests Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta Meta `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	ClientId  *ClientId          `json:"client_id,omitempty"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   ComposeRequest     `json:"request"`
}

// CreateBlueprintRequest defines model for CreateBlueprintRequest.
type CreateBlueprintRequest struct {
	Customizations Customizations `json:"customizations"`
	Description    string         `json:"description"`

	// Distribution List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution Distributions `json:"distribution"`

	// ImageRequests Array of image requests. Having more image requests in a single blueprint is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
	Name          string         `json:"name"`
}

// CreateBlueprintResponse defines model for CreateBlueprintResponse.
type CreateBlueprintResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// CustomRepository Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// Gpgkey GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem         *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap           *OpenSCAP           `json:"openscap,omitempty"`
	Packages           *[]string           `json:"packages,omitempty"`

	// PartitioningMode Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode    *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`
	PayloadRepositories *[]Repository                   `json:"payload_repositories,omitempty"`
	Subscription        *Subscription                   `json:"subscription,omitempty"`

	// Users list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// CustomizationsPartitioningMode Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DistributionProfileItem defines model for DistributionProfileItem.
type DistributionProfileItem string

// DistributionProfileResponse List of profiles for a given distribution
type DistributionProfileResponse = []DistributionProfileItem

// Distributions List of all distributions that image builder supports. A user might not have access to
// restricted distributions.
//
// Restricted distributions include the RHEL nightlies and the Fedora distributions.
type Distributions string

// DistributionsResponse List of distributions this user is allowed to build.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// MinSize size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// ShareWithAccounts List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// Architecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageRequestArchitecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Meta defines model for Meta.
type Meta struct {
	Count int `json:"count"`
}

// OCIUploadRequestOptions defines model for OCIUploadRequestOptions.
type OCIUploadRequestOptions = map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// Contenturl A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Parent Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Rhsm Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	// ProfileDescription The longform policy description
	ProfileDescription *string `json:"profile_description,omitempty"`

	// ProfileId The policy reference ID
	ProfileId string `json:"profile_id"`

	// ProfileName The policy type
	ProfileName *string `json:"profile_name,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta Meta `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// CheckRepoGpg Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Rhc Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options UploadRequest_Options `json:"options"`
	Type    UploadTypes           `json:"type"`
}

// UploadRequest_Options defines model for UploadRequest.Options.
type UploadRequest_Options struct {
	union json.RawMessage
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options UploadStatus_Options `json:"options"`
	Status  UploadStatusStatus   `json:"status"`
	Type    UploadTypes          `json:"type"`
}

// UploadStatus_Options defines model for UploadStatus.Options.
type UploadStatus_Options struct {
	union json.RawMessage
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// Limit max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// IgnoreImageTypes Filter the composes on image type. The filter is optional and can be specified multiple times.
	IgnoreImageTypes *[]ImageTypes `form:"ignoreImageTypes,omitempty" json:"ignoreImageTypes,omitempty"`
}

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// Limit max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// Distribution distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// Architecture architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// Search packages to look for
	Search string `form:"search" json:"search"`

	// Limit max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeRequest

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneRequest

// CreateBlueprintJSONRequestBody defines body for CreateBlueprint for application/json ContentType.
type CreateBlueprintJSONRequestBody = CreateBlueprintRequest

// AsAWSEC2Clone returns the union data inside the CloneRequest as a AWSEC2Clone
func (t CloneRequest) AsAWSEC2Clone() (AWSEC2Clone, error) {
	var body AWSEC2Clone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSEC2Clone overwrites any union data inside the CloneRequest as the provided AWSEC2Clone
func (t *CloneRequest) FromAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSEC2Clone performs a merge with any union data inside the CloneRequest, using the provided AWSEC2Clone
func (t *CloneRequest) MergeAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CloneRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CloneRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadStatus returns the union data inside the CloneStatusResponse_Options as a AWSUploadStatus
func (t CloneStatusResponse_Options) AsAWSUploadStatus() (AWSUploadStatus, error) {
	var body AWSUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided AWSUploadStatus
func (t *CloneStatusResponse_Options) FromAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided AWSUploadStatus
func (t *CloneStatusResponse_Options) MergeAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadStatus returns the union data inside the CloneStatusResponse_Options as a AWSS3UploadStatus
func (t CloneStatusResponse_Options) AsAWSS3UploadStatus() (AWSS3UploadStatus, error) {
	var body AWSS3UploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided AWSS3UploadStatus
func (t *CloneStatusResponse_Options) FromAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided AWSS3UploadStatus
func (t *CloneStatusResponse_Options) MergeAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadStatus returns the union data inside the CloneStatusResponse_Options as a GCPUploadStatus
func (t CloneStatusResponse_Options) AsGCPUploadStatus() (GCPUploadStatus, error) {
	var body GCPUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided GCPUploadStatus
func (t *CloneStatusResponse_Options) FromGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided GCPUploadStatus
func (t *CloneStatusResponse_Options) MergeGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadStatus returns the union data inside the CloneStatusResponse_Options as a AzureUploadStatus
func (t CloneStatusResponse_Options) AsAzureUploadStatus() (AzureUploadStatus, error) {
	var body AzureUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided AzureUploadStatus
func (t *CloneStatusResponse_Options) FromAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided AzureUploadStatus
func (t *CloneStatusResponse_Options) MergeAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadStatus returns the union data inside the CloneStatusResponse_Options as a OCIUploadStatus
func (t CloneStatusResponse_Options) AsOCIUploadStatus() (OCIUploadStatus, error) {
	var body OCIUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided OCIUploadStatus
func (t *CloneStatusResponse_Options) FromOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided OCIUploadStatus
func (t *CloneStatusResponse_Options) MergeOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CloneStatusResponse_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CloneStatusResponse_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSUploadRequestOptions
func (t UploadRequest_Options) AsAWSUploadRequestOptions() (AWSUploadRequestOptions, error) {
	var body AWSUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) FromAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) MergeAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSS3UploadRequestOptions
func (t UploadRequest_Options) AsAWSS3UploadRequestOptions() (AWSS3UploadRequestOptions, error) {
	var body AWSS3UploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) FromAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) MergeAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadRequestOptions returns the union data inside the UploadRequest_Options as a GCPUploadRequestOptions
func (t UploadRequest_Options) AsGCPUploadRequestOptions() (GCPUploadRequestOptions, error) {
	var body GCPUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) FromGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) MergeGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadRequestOptions returns the union data inside the UploadRequest_Options as a AzureUploadRequestOptions
func (t UploadRequest_Options) AsAzureUploadRequestOptions() (AzureUploadRequestOptions, error) {
	var body AzureUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) FromAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) MergeAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadRequestOptions returns the union data inside the UploadRequest_Options as a OCIUploadRequestOptions
func (t UploadRequest_Options) AsOCIUploadRequestOptions() (OCIUploadRequestOptions, error) {
	var body OCIUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided OCIUploadRequestOptions
func (t *UploadRequest_Options) FromOCIUploadRequestOptions(v OCIUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided OCIUploadRequestOptions
func (t *UploadRequest_Options) MergeOCIUploadRequestOptions(v OCIUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadRequest_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadRequest_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadStatus returns the union data inside the UploadStatus_Options as a AWSUploadStatus
func (t UploadStatus_Options) AsAWSUploadStatus() (AWSUploadStatus, error) {
	var body AWSUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSUploadStatus
func (t *UploadStatus_Options) FromAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSUploadStatus
func (t *UploadStatus_Options) MergeAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadStatus returns the union data inside the UploadStatus_Options as a AWSS3UploadStatus
func (t UploadStatus_Options) AsAWSS3UploadStatus() (AWSS3UploadStatus, error) {
	var body AWSS3UploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSS3UploadStatus
func (t *UploadStatus_Options) FromAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSS3UploadStatus
func (t *UploadStatus_Options) MergeAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadStatus returns the union data inside the UploadStatus_Options as a GCPUploadStatus
func (t UploadStatus_Options) AsGCPUploadStatus() (GCPUploadStatus, error) {
	var body GCPUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadStatus overwrites any union data inside the UploadStatus_Options as the provided GCPUploadStatus
func (t *UploadStatus_Options) FromGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided GCPUploadStatus
func (t *UploadStatus_Options) MergeGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadStatus returns the union data inside the UploadStatus_Options as a AzureUploadStatus
func (t UploadStatus_Options) AsAzureUploadStatus() (AzureUploadStatus, error) {
	var body AzureUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AzureUploadStatus
func (t *UploadStatus_Options) FromAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AzureUploadStatus
func (t *UploadStatus_Options) MergeAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadStatus returns the union data inside the UploadStatus_Options as a OCIUploadStatus
func (t UploadStatus_Options) AsOCIUploadStatus() (OCIUploadStatus, error) {
	var body OCIUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadStatus overwrites any union data inside the UploadStatus_Options as the provided OCIUploadStatus
func (t *UploadStatus_Options) FromOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided OCIUploadStatus
func (t *UploadStatus_Options) MergeOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadStatus_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadStatus_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution Distributions) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the distributions available to this user
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// create blueprint
	// (POST /experimental/blueprint)
	CreateBlueprint(ctx echo.Context) error
	// create new compose from blueprint
	// (POST /experimental/blueprint/{id}/compose)
	ComposeBlueprint(ctx echo.Context, id openapi_types.UUID) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error
	// get the available profiles for a given distribution. This is a temporary endpoint meant to be removed soon.
	// (GET /oscap/{distribution}/profiles)
	GetOscapProfiles(ctx echo.Context, distribution Distributions) error
	// get the customizations for a given distribution and profile. This is a temporary endpoint meant to be removed soon.
	// (GET /oscap/{distribution}/{profile}/customizations)
	GetOscapCustomizations(ctx echo.Context, distribution Distributions, profile DistributionProfileItem) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "ignoreImageTypes" -------------

	err = runtime.BindQueryParameter("form", true, false, "ignoreImageTypes", ctx.QueryParams(), &params.IgnoreImageTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ignoreImageTypes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// CreateBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBlueprint(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateBlueprint(ctx)
	return err
}

// ComposeBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeBlueprint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeBlueprint(ctx, id)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetOscapProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetOscapProfiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOscapProfiles(ctx, distribution)
	return err
}

// GetOscapCustomizations converts echo context to params.
func (w *ServerInterfaceWrapper) GetOscapCustomizations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Path parameter "profile" -------------
	var profile DistributionProfileItem

	err = runtime.BindStyledParameterWithLocation("simple", false, "profile", runtime.ParamLocationPath, ctx.Param("profile"), &profile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profile: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOscapCustomizations(ctx, distribution, profile)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.POST(baseURL+"/experimental/blueprint", wrapper.CreateBlueprint)
	router.POST(baseURL+"/experimental/blueprint/:id/compose", wrapper.ComposeBlueprint)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/oscap/:distribution/profiles", wrapper.GetOscapProfiles)
	router.GET(baseURL+"/oscap/:distribution/:profile/customizations", wrapper.GetOscapCustomizations)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
