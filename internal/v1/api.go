// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for ClientId.
const (
	Api ClientId = "api"
	Ui  ClientId = "ui"
)

// Defines values for CloneStatusResponseStatus.
const (
	CloneStatusResponseStatusFailure CloneStatusResponseStatus = "failure"
	CloneStatusResponseStatusPending CloneStatusResponseStatus = "pending"
	CloneStatusResponseStatusRunning CloneStatusResponseStatus = "running"
	CloneStatusResponseStatusSuccess CloneStatusResponseStatus = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	AutoLvm CustomizationsPartitioningMode = "auto-lvm"
	Lvm     CustomizationsPartitioningMode = "lvm"
	Raw     CustomizationsPartitioningMode = "raw"
)

// Defines values for DistributionProfileItem.
const (
	XccdfOrgSsgprojectContentProfileAnssiBp28Enhanced     DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_enhanced"
	XccdfOrgSsgprojectContentProfileAnssiBp28High         DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_high"
	XccdfOrgSsgprojectContentProfileAnssiBp28Intermediary DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_intermediary"
	XccdfOrgSsgprojectContentProfileAnssiBp28Minimal      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_minimal"
	XccdfOrgSsgprojectContentProfileCis                   DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis"
	XccdfOrgSsgprojectContentProfileCisServerL1           DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_server_l1"
	XccdfOrgSsgprojectContentProfileCisWorkstationL1      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_workstation_l1"
	XccdfOrgSsgprojectContentProfileCisWorkstationL2      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_workstation_l2"
	XccdfOrgSsgprojectContentProfileCui                   DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cui"
	XccdfOrgSsgprojectContentProfileE8                    DistributionProfileItem = "xccdf_org.ssgproject.content_profile_e8"
	XccdfOrgSsgprojectContentProfileHipaa                 DistributionProfileItem = "xccdf_org.ssgproject.content_profile_hipaa"
	XccdfOrgSsgprojectContentProfileIsmO                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_ism_o"
	XccdfOrgSsgprojectContentProfileOspp                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_ospp"
	XccdfOrgSsgprojectContentProfilePciDss                DistributionProfileItem = "xccdf_org.ssgproject.content_profile_pci-dss"
	XccdfOrgSsgprojectContentProfileStandard              DistributionProfileItem = "xccdf_org.ssgproject.content_profile_standard"
	XccdfOrgSsgprojectContentProfileStig                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_stig"
	XccdfOrgSsgprojectContentProfileStigGui               DistributionProfileItem = "xccdf_org.ssgproject.content_profile_stig_gui"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Fedora40     Distributions = "fedora-40"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel89       Distributions = "rhel-89"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel93       Distributions = "rhel-93"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	ImageRequestArchitectureAarch64 ImageRequestArchitecture = "aarch64"
	ImageRequestArchitectureX8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesOci               ImageTypes = "oci"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	Failure UploadStatusStatus = "failure"
	Pending UploadStatusStatus = "pending"
	Running UploadStatusStatus = "running"
	Success UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws              UploadTypes = "aws"
	UploadTypesAwsS3            UploadTypes = "aws.s3"
	UploadTypesAzure            UploadTypes = "azure"
	UploadTypesGcp              UploadTypes = "gcp"
	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"
)

// Defines values for GetPackagesParamsArchitecture.
const (
	GetPackagesParamsArchitectureAarch64 GetPackagesParamsArchitecture = "aarch64"
	GetPackagesParamsArchitectureX8664   GetPackagesParamsArchitecture = "x86_64"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// Region A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// ShareWithAccounts An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Repositories Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// ImageName Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// ResourceGroup Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// SourceId ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// SubscriptionId ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// TenantId ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// BlueprintItem defines model for BlueprintItem.
type BlueprintItem struct {
	Description    string             `json:"description"`
	Id             openapi_types.UUID `json:"id"`
	LastModifiedAt string             `json:"last_modified_at"`
	Name           string             `json:"name"`
	Version        int                `json:"version"`
}

// BlueprintsResponse defines model for BlueprintsResponse.
type BlueprintsResponse struct {
	Data  []BlueprintItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClientId defines model for ClientId.
type ClientId string

// CloneRequest defines model for CloneRequest.
type CloneRequest struct {
	union json.RawMessage
}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// CloneStatusResponse defines model for CloneStatusResponse.
type CloneStatusResponse struct {
	ComposeId *openapi_types.UUID         `json:"compose_id,omitempty"`
	Options   CloneStatusResponse_Options `json:"options"`
	Status    CloneStatusResponseStatus   `json:"status"`
	Type      UploadTypes                 `json:"type"`
}

// CloneStatusResponse_Options defines model for CloneStatusResponse.Options.
type CloneStatusResponse_Options struct {
	union json.RawMessage
}

// CloneStatusResponseStatus defines model for CloneStatusResponse.Status.
type CloneStatusResponseStatus string

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	// ComposeId UUID of the parent compose of the clone
	ComposeId openapi_types.UUID `json:"compose_id"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   CloneRequest       `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// OstreeCommit ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Packages Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	ClientId       *ClientId       `json:"client_id,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`

	// Distribution List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution     Distributions `json:"distribution"`
	ImageDescription *string       `json:"image_description,omitempty"`
	ImageName        *string       `json:"image_name,omitempty"`

	// ImageRequests Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	ClientId  *ClientId          `json:"client_id,omitempty"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   ComposeRequest     `json:"request"`
}

// CreateBlueprintRequest defines model for CreateBlueprintRequest.
type CreateBlueprintRequest struct {
	Customizations Customizations `json:"customizations"`
	Description    string         `json:"description"`

	// Distribution List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution Distributions `json:"distribution"`

	// ImageRequests Array of image requests. Having more image requests in a single blueprint is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
	Name          string         `json:"name"`
}

// CreateBlueprintResponse defines model for CreateBlueprintResponse.
type CreateBlueprintResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// CustomRepository Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// Gpgkey GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem         *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap           *OpenSCAP           `json:"openscap,omitempty"`
	Packages           *[]string           `json:"packages,omitempty"`

	// PartitioningMode Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode    *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`
	PayloadRepositories *[]Repository                   `json:"payload_repositories,omitempty"`
	Subscription        *Subscription                   `json:"subscription,omitempty"`

	// Users list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// CustomizationsPartitioningMode Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DistributionProfileItem defines model for DistributionProfileItem.
type DistributionProfileItem string

// DistributionProfileResponse List of profiles for a given distribution
type DistributionProfileResponse = []DistributionProfileItem

// Distributions List of all distributions that image builder supports. A user might not have access to
// restricted distributions.
//
// Restricted distributions include the RHEL nightlies and the Fedora distributions.
type Distributions string

// DistributionsResponse List of distributions this user is allowed to build.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// MinSize size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// ShareWithAccounts List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// Architecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageRequestArchitecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OCIUploadRequestOptions defines model for OCIUploadRequestOptions.
type OCIUploadRequestOptions = map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// Contenturl A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Parent Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Rhsm Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	// ProfileDescription The longform policy description
	ProfileDescription *string `json:"profile_description,omitempty"`

	// ProfileId The policy reference ID
	ProfileId string `json:"profile_id"`

	// ProfileName The policy type
	ProfileName *string `json:"profile_name,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// CheckRepoGpg Enables gpg verification of the repository metadata
	CheckRepoGpg   *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey         *string `json:"gpgkey,omitempty"`
	IgnoreSsl      *bool   `json:"ignore_ssl,omitempty"`
	Metalink       *string `json:"metalink,omitempty"`
	Mirrorlist     *string `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Rhsm           bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Rhc Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options UploadRequest_Options `json:"options"`
	Type    UploadTypes           `json:"type"`
}

// UploadRequest_Options defines model for UploadRequest.Options.
type UploadRequest_Options struct {
	union json.RawMessage
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options UploadStatus_Options `json:"options"`
	Status  UploadStatusStatus   `json:"status"`
	Type    UploadTypes          `json:"type"`
}

// UploadStatus_Options defines model for UploadStatus.Options.
type UploadStatus_Options struct {
	union json.RawMessage
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// Limit max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// IgnoreImageTypes Filter the composes on image type. The filter is optional and can be specified multiple times.
	IgnoreImageTypes *[]ImageTypes `form:"ignoreImageTypes,omitempty" json:"ignoreImageTypes,omitempty"`
}

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// Limit max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetBlueprintsParams defines parameters for GetBlueprints.
type GetBlueprintsParams struct {
	// Search search for blueprints by name or description
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Limit max amount of blueprints, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset blueprint page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// Distribution distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// Architecture architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// Search packages to look for
	Search string `form:"search" json:"search"`

	// Limit max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeRequest

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneRequest

// CreateBlueprintJSONRequestBody defines body for CreateBlueprint for application/json ContentType.
type CreateBlueprintJSONRequestBody = CreateBlueprintRequest

// UpdateBlueprintJSONRequestBody defines body for UpdateBlueprint for application/json ContentType.
type UpdateBlueprintJSONRequestBody = CreateBlueprintRequest

// AsAWSEC2Clone returns the union data inside the CloneRequest as a AWSEC2Clone
func (t CloneRequest) AsAWSEC2Clone() (AWSEC2Clone, error) {
	var body AWSEC2Clone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSEC2Clone overwrites any union data inside the CloneRequest as the provided AWSEC2Clone
func (t *CloneRequest) FromAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSEC2Clone performs a merge with any union data inside the CloneRequest, using the provided AWSEC2Clone
func (t *CloneRequest) MergeAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CloneRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CloneRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadStatus returns the union data inside the CloneStatusResponse_Options as a AWSUploadStatus
func (t CloneStatusResponse_Options) AsAWSUploadStatus() (AWSUploadStatus, error) {
	var body AWSUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided AWSUploadStatus
func (t *CloneStatusResponse_Options) FromAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided AWSUploadStatus
func (t *CloneStatusResponse_Options) MergeAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadStatus returns the union data inside the CloneStatusResponse_Options as a AWSS3UploadStatus
func (t CloneStatusResponse_Options) AsAWSS3UploadStatus() (AWSS3UploadStatus, error) {
	var body AWSS3UploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided AWSS3UploadStatus
func (t *CloneStatusResponse_Options) FromAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided AWSS3UploadStatus
func (t *CloneStatusResponse_Options) MergeAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadStatus returns the union data inside the CloneStatusResponse_Options as a GCPUploadStatus
func (t CloneStatusResponse_Options) AsGCPUploadStatus() (GCPUploadStatus, error) {
	var body GCPUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided GCPUploadStatus
func (t *CloneStatusResponse_Options) FromGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided GCPUploadStatus
func (t *CloneStatusResponse_Options) MergeGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadStatus returns the union data inside the CloneStatusResponse_Options as a AzureUploadStatus
func (t CloneStatusResponse_Options) AsAzureUploadStatus() (AzureUploadStatus, error) {
	var body AzureUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided AzureUploadStatus
func (t *CloneStatusResponse_Options) FromAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided AzureUploadStatus
func (t *CloneStatusResponse_Options) MergeAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadStatus returns the union data inside the CloneStatusResponse_Options as a OCIUploadStatus
func (t CloneStatusResponse_Options) AsOCIUploadStatus() (OCIUploadStatus, error) {
	var body OCIUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadStatus overwrites any union data inside the CloneStatusResponse_Options as the provided OCIUploadStatus
func (t *CloneStatusResponse_Options) FromOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadStatus performs a merge with any union data inside the CloneStatusResponse_Options, using the provided OCIUploadStatus
func (t *CloneStatusResponse_Options) MergeOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CloneStatusResponse_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CloneStatusResponse_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSUploadRequestOptions
func (t UploadRequest_Options) AsAWSUploadRequestOptions() (AWSUploadRequestOptions, error) {
	var body AWSUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) FromAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) MergeAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSS3UploadRequestOptions
func (t UploadRequest_Options) AsAWSS3UploadRequestOptions() (AWSS3UploadRequestOptions, error) {
	var body AWSS3UploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) FromAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) MergeAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadRequestOptions returns the union data inside the UploadRequest_Options as a GCPUploadRequestOptions
func (t UploadRequest_Options) AsGCPUploadRequestOptions() (GCPUploadRequestOptions, error) {
	var body GCPUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) FromGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) MergeGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadRequestOptions returns the union data inside the UploadRequest_Options as a AzureUploadRequestOptions
func (t UploadRequest_Options) AsAzureUploadRequestOptions() (AzureUploadRequestOptions, error) {
	var body AzureUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) FromAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) MergeAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadRequestOptions returns the union data inside the UploadRequest_Options as a OCIUploadRequestOptions
func (t UploadRequest_Options) AsOCIUploadRequestOptions() (OCIUploadRequestOptions, error) {
	var body OCIUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided OCIUploadRequestOptions
func (t *UploadRequest_Options) FromOCIUploadRequestOptions(v OCIUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided OCIUploadRequestOptions
func (t *UploadRequest_Options) MergeOCIUploadRequestOptions(v OCIUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadRequest_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadRequest_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadStatus returns the union data inside the UploadStatus_Options as a AWSUploadStatus
func (t UploadStatus_Options) AsAWSUploadStatus() (AWSUploadStatus, error) {
	var body AWSUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSUploadStatus
func (t *UploadStatus_Options) FromAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSUploadStatus
func (t *UploadStatus_Options) MergeAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadStatus returns the union data inside the UploadStatus_Options as a AWSS3UploadStatus
func (t UploadStatus_Options) AsAWSS3UploadStatus() (AWSS3UploadStatus, error) {
	var body AWSS3UploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSS3UploadStatus
func (t *UploadStatus_Options) FromAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSS3UploadStatus
func (t *UploadStatus_Options) MergeAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadStatus returns the union data inside the UploadStatus_Options as a GCPUploadStatus
func (t UploadStatus_Options) AsGCPUploadStatus() (GCPUploadStatus, error) {
	var body GCPUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadStatus overwrites any union data inside the UploadStatus_Options as the provided GCPUploadStatus
func (t *UploadStatus_Options) FromGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided GCPUploadStatus
func (t *UploadStatus_Options) MergeGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadStatus returns the union data inside the UploadStatus_Options as a AzureUploadStatus
func (t UploadStatus_Options) AsAzureUploadStatus() (AzureUploadStatus, error) {
	var body AzureUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AzureUploadStatus
func (t *UploadStatus_Options) FromAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AzureUploadStatus
func (t *UploadStatus_Options) MergeAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadStatus returns the union data inside the UploadStatus_Options as a OCIUploadStatus
func (t UploadStatus_Options) AsOCIUploadStatus() (OCIUploadStatus, error) {
	var body OCIUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadStatus overwrites any union data inside the UploadStatus_Options as the provided OCIUploadStatus
func (t *UploadStatus_Options) FromOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided OCIUploadStatus
func (t *UploadStatus_Options) MergeOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadStatus_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadStatus_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution Distributions) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the distributions available to this user
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// create blueprint
	// (POST /experimental/blueprint)
	CreateBlueprint(ctx echo.Context) error
	// update blueprint
	// (PUT /experimental/blueprint/{id})
	UpdateBlueprint(ctx echo.Context, id openapi_types.UUID) error
	// create new compose from blueprint
	// (POST /experimental/blueprint/{id}/compose)
	ComposeBlueprint(ctx echo.Context, id openapi_types.UUID) error
	// get a collection of blueprints
	// (GET /experimental/blueprints)
	GetBlueprints(ctx echo.Context, params GetBlueprintsParams) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error
	// get the available profiles for a given distribution. This is a temporary endpoint meant to be removed soon.
	// (GET /oscap/{distribution}/profiles)
	GetOscapProfiles(ctx echo.Context, distribution Distributions) error
	// get the customizations for a given distribution and profile. This is a temporary endpoint meant to be removed soon.
	// (GET /oscap/{distribution}/{profile}/customizations)
	GetOscapCustomizations(ctx echo.Context, distribution Distributions, profile DistributionProfileItem) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "ignoreImageTypes" -------------

	err = runtime.BindQueryParameter("form", true, false, "ignoreImageTypes", ctx.QueryParams(), &params.IgnoreImageTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ignoreImageTypes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// CreateBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBlueprint(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateBlueprint(ctx)
	return err
}

// UpdateBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateBlueprint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateBlueprint(ctx, id)
	return err
}

// ComposeBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeBlueprint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeBlueprint(ctx, id)
	return err
}

// GetBlueprints converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlueprints(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlueprintsParams
	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlueprints(ctx, params)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetOscapProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetOscapProfiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOscapProfiles(ctx, distribution)
	return err
}

// GetOscapCustomizations converts echo context to params.
func (w *ServerInterfaceWrapper) GetOscapCustomizations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Path parameter "profile" -------------
	var profile DistributionProfileItem

	err = runtime.BindStyledParameterWithLocation("simple", false, "profile", runtime.ParamLocationPath, ctx.Param("profile"), &profile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profile: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOscapCustomizations(ctx, distribution, profile)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.POST(baseURL+"/experimental/blueprint", wrapper.CreateBlueprint)
	router.PUT(baseURL+"/experimental/blueprint/:id", wrapper.UpdateBlueprint)
	router.POST(baseURL+"/experimental/blueprint/:id/compose", wrapper.ComposeBlueprint)
	router.GET(baseURL+"/experimental/blueprints", wrapper.GetBlueprints)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/oscap/:distribution/profiles", wrapper.GetOscapProfiles)
	router.GET(baseURL+"/oscap/:distribution/:profile/customizations", wrapper.GetOscapCustomizations)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//JBPVpk2FAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
